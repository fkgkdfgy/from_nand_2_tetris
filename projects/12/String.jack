// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */



class String {

    field int length, max_length;
    field Array content;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let length = 0;
        let max_length = maxLength;
        let content = Memory.alloc(maxLength);
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return content[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let content[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let content[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let length = length - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var i, val, sign;
        let i = 0;
        let val = 0;
        let sign = 1;

        if(content[0] == 45) {
            let sign = -1;
            let i = 1;
        }

        while((i < length) & (isDigit(content[i]))) 
        {
            let val = val * 10 + (content[i] - 48);
            let i = i + 1;
        }
        return val * sign;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var sign, single_number;
        let sign = 1;
        let single_number = 0;

        if(val < 0) {
            let sign = -1;
            do appendChar(45);
        }

        while(val != 0) {
            let single_number = val- (val /10 * 10);
            do appendChar(String.toChar(single_number));
            let val = val / 10;
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }

    /** Returns the number character. */
    function char toChar(int number){
        if(number < 0 || number > 9) {
            return 0;
        } else {
            return number + 48;
        }
    }

    /** Returns the digit character. */
    function boolean isDigit(char c)
    {
        if (c<48 || c>57) {
            return false;
        } else {
            return true;
        }
    }
}
